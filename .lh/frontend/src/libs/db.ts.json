{
    "sourceFile": "frontend/src/libs/db.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1747787748853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747787769411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,16 +19,16 @@\n     }\r\n   })\r\n }\r\n \r\n-export async function salvarSonho(sonho: SonhoSalvo) {\r\n+export async function salvarSonho(sonho: Sonho) {\r\n   const database = await initDB()\r\n   const tx = database.transaction('sonhos', 'readwrite')\r\n   tx.objectStore('sonhos').put(sonho)\r\n   return tx.oncomplete\r\n }\r\n \r\n-export async function listarSonhos(): Promise<SonhoSalvo[]> {\r\n+export async function listarSonhos(): Promise<Sonho[]> {\r\n   const database = await initDB()\r\n   const tx = database.transaction('sonhos', 'readonly')\r\n   const req = tx.objectStore('sonhos').getAll()\r\n   return new Promise((resolve) => (req.onsuccess = () => resolve(req.result)))\r\n@@ -44,9 +44,9 @@\n export async function atualizarFavorito(id: number, favorito: boolean) {\r\n   const database = await initDB()\r\n   const tx = database.transaction('sonhos', 'readwrite')\r\n   const store = tx.objectStore('sonhos')\r\n-  const sonho = await new Promise<SonhoSalvo>((resolve) => {\r\n+  const sonho = await new Promise<Sonho>((resolve) => {\r\n     const req = store.get(id)\r\n     req.onsuccess = () => resolve(req.result)\r\n   })\r\n   if (sonho) {\r\n"
                }
            ],
            "date": 1747787748853,
            "name": "Commit-0",
            "content": "import { type Sonho } from '../types/Sonho'\r\n\r\n\r\nlet db: IDBDatabase | null = null\r\n\r\nfunction initDB(): Promise<IDBDatabase> {\r\n  return new Promise((resolve, reject) => {\r\n    if (db) return resolve(db)\r\n\r\n    const request = indexedDB.open('sonhai', 1)\r\n    request.onerror = () => reject(request.error)\r\n    request.onsuccess = () => {\r\n      db = request.result\r\n      resolve(db)\r\n    }\r\n    request.onupgradeneeded = () => {\r\n      const store = request.result.createObjectStore('sonhos', { keyPath: 'id', autoIncrement: true })\r\n      store.createIndex('data', 'data')\r\n    }\r\n  })\r\n}\r\n\r\nexport async function salvarSonho(sonho: SonhoSalvo) {\r\n  const database = await initDB()\r\n  const tx = database.transaction('sonhos', 'readwrite')\r\n  tx.objectStore('sonhos').put(sonho)\r\n  return tx.oncomplete\r\n}\r\n\r\nexport async function listarSonhos(): Promise<SonhoSalvo[]> {\r\n  const database = await initDB()\r\n  const tx = database.transaction('sonhos', 'readonly')\r\n  const req = tx.objectStore('sonhos').getAll()\r\n  return new Promise((resolve) => (req.onsuccess = () => resolve(req.result)))\r\n}\r\n\r\nexport async function deletarSonho(id: number) {\r\n  const database = await initDB()\r\n  const tx = database.transaction('sonhos', 'readwrite')\r\n  tx.objectStore('sonhos').delete(id)\r\n  return tx.oncomplete\r\n}\r\n\r\nexport async function atualizarFavorito(id: number, favorito: boolean) {\r\n  const database = await initDB()\r\n  const tx = database.transaction('sonhos', 'readwrite')\r\n  const store = tx.objectStore('sonhos')\r\n  const sonho = await new Promise<SonhoSalvo>((resolve) => {\r\n    const req = store.get(id)\r\n    req.onsuccess = () => resolve(req.result)\r\n  })\r\n  if (sonho) {\r\n    sonho.favorito = favorito\r\n    store.put(sonho)\r\n  }\r\n  return tx.oncomplete\r\n}\r\n"
        }
    ]
}