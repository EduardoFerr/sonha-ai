{
    "sourceFile": "frontend/src/App.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1747762321846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747763466046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,88 +1,94 @@\n-import { useEffect, useRef, useState } from 'react'\n-import { Capacitor } from '@capacitor/core'\n-import { SpeechRecognition } from '@capacitor-community/speech-recognition'\n+import { useState } from 'react'\n+import { useSpeechRecognition } from './hooks/useSpeechRecognition'\n+import { salvarSonho, deletarSonho, atualizarFavorito } from './libs/db'\n+import { useSonhos } from './hooks/useSonhos'\n+import { interpretarSonho } from './services/interpretadorService'\n \n-declare global {\n-  interface Window {\n-    webkitSpeechRecognition: any\n-    SpeechRecognition: any\n-  }\n-  interface SpeechRecognitionEvent extends Event {\n-    readonly results: SpeechRecognitionResultList\n-  }\n-}\n+import './App.css'\n \n-export function useVoz(onTexto: (texto: string) => void) {\n-  const [gravando, setGravando] = useState(false)\n-  const isMobile = Capacitor.getPlatform() !== 'web'\n-  const recognitionRef = useRef<any>(null)\n+function App() {\n+  const hojeISO = new Date().toISOString().split('T')[0]\n+  const [dataSelecionada, setDataSelecionada] = useState(hojeISO)\n+  const [texto, setTexto] = useState('')\n \n-  useEffect(() => {\n-    if (!isMobile) {\n-      const SpeechRecognitionClass = window.SpeechRecognition || window.webkitSpeechRecognition\n-      if (!SpeechRecognitionClass) return\n+  const { historico, setHistorico } = useSonhos()\n \n-      const recognition = new SpeechRecognitionClass()\n-      recognition.lang = 'pt-BR'\n-      recognition.continuous = true\n-      recognition.interimResults = true\n+  const { gravando, erro, start, stop } = useSpeechRecognition({\n+    onTexto: (textoReconhecido) =>\n+      setTexto((prev) => `${prev} ${textoReconhecido}`.trim()),\n+  })\n \n-      recognition.onresult = (e: SpeechRecognitionEvent) => {\n-        const texto = Array.from(e.results)\n-          .map((r) => r[0].transcript)\n-          .join(' ')\n-        onTexto(texto)\n-      }\n+  const toggleMic = () => (gravando ? stop() : start())\n \n-      recognition.onend = () => {\n-        if (recognitionRef.current && gravando) {\n-          recognitionRef.current.start()\n-        }\n-      }\n+  const enviarSonho = async () => {\n+    const interpretado = await interpretarSonho(texto)\n+    await salvarSonho({ data: dataSelecionada, texto, interpretacao: interpretado, favorito: false })\n+    const sonhos = await (await import('./libs/db')).listarSonhos()\n+    setHistorico(sonhos)\n+  }\n \n-      recognitionRef.current = recognition\n-    }\n+  const sonhoAtual = historico.find((s) => s.data === dataSelecionada)\n \n-    return () => {\n-      recognitionRef.current?.stop()\n-    }\n-  }, [isMobile])\n+  return (\n+    <>\n+      <main className=\"p-8 max-w-xl mx-auto space-y-4\">\n+        <h1 className=\"text-2xl font-bold\">SonhAI ‚Äì Di√°rio de Sonhos</h1>\n \n-  const iniciar = async () => {\n-    if (isMobile) {\n-      const { speechRecognition } = await SpeechRecognition.requestPermissions()\n-      if (speechRecognition !== 'granted') return\n+        {erro && <div className=\"text-red-600\">{erro}</div>}\n \n-      await SpeechRecognition.start({\n-        language: 'pt-BR',\n-        partialResults: true,\n-        popup: false,\n-      })\n+        <div className=\"flex gap-2 justify-center items-center\">\n+          <button onClick={() =>\n+            setDataSelecionada(prev => new Date(new Date(prev + 'T00:00').setDate(new Date(prev + 'T00:00').getDate() - 1)).toISOString().split('T')[0])\n+          }>‚óÄ</button>\n \n-      SpeechRecognition.addListener('partialResults', (data: { matches: string[] }) => {\n-        if (data.matches?.length) onTexto(data.matches[0])\n-      })\n-    } else {\n-      recognitionRef.current?.start()\n-    }\n+          <input\n+            type=\"date\"\n+            value={dataSelecionada}\n+            onChange={(e) => setDataSelecionada(e.target.value)}\n+          />\n \n-    setGravando(true)\n-  }\n+          <button onClick={() =>\n+            setDataSelecionada(prev => new Date(new Date(prev + 'T00:00').setDate(new Date(prev + 'T00:00').getDate() + 1)).toISOString().split('T')[0])\n+          }>‚ñ∂</button>\n+        </div>\n \n-  const parar = async () => {\n-    if (isMobile) {\n-      await SpeechRecognition.stop()\n-      await SpeechRecognition.removeAllListeners()\n-    } else {\n-      recognitionRef.current?.stop()\n-    }\n+        <textarea\n+          className=\"w-full h-40 p-2 border rounded\"\n+          placeholder=\"Descreva seu sonho...\"\n+          value={texto}\n+          onChange={(e) => setTexto(e.target.value)}\n+        />\n \n-    setGravando(false)\n-  }\n+        <div className=\"flex gap-4\">\n+          <button\n+            onClick={toggleMic}\n+            className={`flex-1 px-4 py-2 text-white rounded ${gravando ? 'bg-red-600' : 'bg-gray-600'}`}\n+          >\n+            {gravando ? 'Gravando‚Ä¶ üéôÔ∏è' : 'Falar'}\n+          </button>\n \n-  return {\n-    gravando,\n-    iniciar,\n-    parar,\n-  }\n+          <button\n+            onClick={enviarSonho}\n+            disabled={!texto.trim()}\n+            className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded\"\n+          >\n+            Interpretar üß†\n+          </button>\n+        </div>\n+\n+        {sonhoAtual && (\n+          <div className=\"mt-4 p-4 border rounded bg-gray-100 space-y-2\">\n+            <p className=\"italic text-sm\">{sonhoAtual.texto}</p>\n+            <p><strong>Interpreta√ß√£o:</strong> {sonhoAtual.interpretacao}</p>\n+            <div className=\"flex gap-2 text-sm\">\n+              <button onClick={() => atualizarFavorito(sonhoAtual.id!, !sonhoAtual.favorito)}>Favorito ‚≠ê</button>\n+              <button onClick={() => deletarSonho(sonhoAtual.id!)}>Excluir üóëÔ∏è</button>\n+            </div>\n+          </div>\n+        )}\n+      </main>\n+    </>\n+  )\n }\n+\n+export default App\n"
                },
                {
                    "date": 1747763479997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { interpretarSonho } from './services/interpretadorService'\n \n import './App.css'\n \n-function App() {\n+export default function App() {\n   const hojeISO = new Date().toISOString().split('T')[0]\n   const [dataSelecionada, setDataSelecionada] = useState(hojeISO)\n   const [texto, setTexto] = useState('')\n \n@@ -90,5 +90,4 @@\n     </>\n   )\n }\n \n-export default App\n"
                },
                {
                    "date": 1747773835750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,93 +1,144 @@\n-import { useState } from 'react'\n-import { useSpeechRecognition } from './hooks/useSpeechRecognition'\n-import { salvarSonho, deletarSonho, atualizarFavorito } from './libs/db'\n-import { useSonhos } from './hooks/useSonhos'\n-import { interpretarSonho } from './services/interpretadorService'\n+import { useEffect, useRef, useState } from 'react'\n+import { Capacitor } from '@capacitor/core'\n+import { SpeechRecognition } from '@capacitor-community/speech-recognition'\n \n-import './App.css'\n+/**\n+ * Declara√ß√µes globais necess√°rias para a API Web Speech\n+ */\n+declare global {\n+  interface Window {\n+    webkitSpeechRecognition: any\n+    SpeechRecognition: any\n+  }\n \n-export default function App() {\n-  const hojeISO = new Date().toISOString().split('T')[0]\n-  const [dataSelecionada, setDataSelecionada] = useState(hojeISO)\n-  const [texto, setTexto] = useState('')\n+  interface SpeechRecognitionEvent extends Event {\n+    readonly results: SpeechRecognitionResultList\n+  }\n+}\n \n-  const { historico, setHistorico } = useSonhos()\n+interface UseSpeechRecognitionOptions {\n+  onTexto: (texto: string) => void\n+}\n \n-  const { gravando, erro, start, stop } = useSpeechRecognition({\n-    onTexto: (textoReconhecido) =>\n-      setTexto((prev) => `${prev} ${textoReconhecido}`.trim()),\n-  })\n+export function useSpeechRecognition({ onTexto }: UseSpeechRecognitionOptions) {\n+  const [gravando, setGravando] = useState(false)\n+  const [erro, setErro] = useState<string | null>(null)\n+  const recognitionRef = useRef<any>(null)\n+  const gravandoRef = useRef(false)\n+  const partialListenerRef = useRef<any>(null)\n+  const platform = Capacitor.getPlatform()\n \n-  const toggleMic = () => (gravando ? stop() : start())\n+  useEffect(() => {\n+    if (platform === 'web') {\n+      const SpeechRecognitionClass = window.SpeechRecognition || window.webkitSpeechRecognition\n+      if (!SpeechRecognitionClass) {\n+        setErro('Reconhecimento de voz n√£o suportado no navegador.')\n+        return\n+      }\n \n-  const enviarSonho = async () => {\n-    const interpretado = await interpretarSonho(texto)\n-    await salvarSonho({ data: dataSelecionada, texto, interpretacao: interpretado, favorito: false })\n-    const sonhos = await (await import('./libs/db')).listarSonhos()\n-    setHistorico(sonhos)\n-  }\n+      const recognition = new SpeechRecognitionClass()\n+      recognition.lang = 'pt-BR'\n+      recognition.continuous = true\n+      recognition.interimResults = true\n \n-  const sonhoAtual = historico.find((s) => s.data === dataSelecionada)\n+      recognition.onresult = (e: SpeechRecognitionEvent) => {\n+        const textoAtual = Array.from(e.results)\n+          .map((r) => r[0].transcript)\n+          .join(' ')\n+        onTexto(textoAtual) // ‚úÖ substitui o texto em tempo real, sem concatenar duplicado\n+      }\n \n-  return (\n-    <>\n-      <main className=\"p-8 max-w-xl mx-auto space-y-4\">\n-        <h1 className=\"text-2xl font-bold\">SonhAI ‚Äì Di√°rio de Sonhos</h1>\n+      recognition.onerror = (e: any) => {\n+        setErro('Erro no reconhecimento de voz: ' + e.error)\n+      }\n \n-        {erro && <div className=\"text-red-600\">{erro}</div>}\n+      recognition.onend = () => {\n+        if (gravandoRef.current) {\n+          recognition.start() // mant√©m ativo enquanto gravando\n+        }\n+      }\n \n-        <div className=\"flex gap-2 justify-center items-center\">\n-          <button onClick={() =>\n-            setDataSelecionada(prev => new Date(new Date(prev + 'T00:00').setDate(new Date(prev + 'T00:00').getDate() - 1)).toISOString().split('T')[0])\n-          }>‚óÄ</button>\n+      recognitionRef.current = recognition\n+    }\n \n-          <input\n-            type=\"date\"\n-            value={dataSelecionada}\n-            onChange={(e) => setDataSelecionada(e.target.value)}\n-          />\n+    return () => {\n+      recognitionRef.current?.stop?.()\n+    }\n+  }, [platform, onTexto])\n \n-          <button onClick={() =>\n-            setDataSelecionada(prev => new Date(new Date(prev + 'T00:00').setDate(new Date(prev + 'T00:00').getDate() + 1)).toISOString().split('T')[0])\n-          }>‚ñ∂</button>\n-        </div>\n+  const start = async () => {\n+    setErro(null)\n \n-        <textarea\n-          className=\"w-full h-40 p-2 border rounded\"\n-          placeholder=\"Descreva seu sonho...\"\n-          value={texto}\n-          onChange={(e) => setTexto(e.target.value)}\n-        />\n+    if (platform === 'android' || platform === 'ios') {\n+      const { speechRecognition } = await SpeechRecognition.requestPermissions()\n+      if (speechRecognition !== 'granted') {\n+        setErro('Permiss√£o negada para usar o microfone.')\n+        return\n+      }\n \n-        <div className=\"flex gap-4\">\n-          <button\n-            onClick={toggleMic}\n-            className={`flex-1 px-4 py-2 text-white rounded ${gravando ? 'bg-red-600' : 'bg-gray-600'}`}\n-          >\n-            {gravando ? 'Gravando‚Ä¶ üéôÔ∏è' : 'Falar'}\n-          </button>\n+      await SpeechRecognition.start({\n+        language: 'pt-BR',\n+        partialResults: true,\n+        popup: false,\n+      })\n \n-          <button\n-            onClick={enviarSonho}\n-            disabled={!texto.trim()}\n-            className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded\"\n-          >\n-            Interpretar üß†\n-          </button>\n-        </div>\n+      // Remove listener anterior\n+      if (partialListenerRef.current) {\n+        await partialListenerRef.current.remove()\n+        partialListenerRef.current = null\n+      }\n \n-        {sonhoAtual && (\n-          <div className=\"mt-4 p-4 border rounded bg-gray-100 space-y-2\">\n-            <p className=\"italic text-sm\">{sonhoAtual.texto}</p>\n-            <p><strong>Interpreta√ß√£o:</strong> {sonhoAtual.interpretacao}</p>\n-            <div className=\"flex gap-2 text-sm\">\n-              <button onClick={() => atualizarFavorito(sonhoAtual.id!, !sonhoAtual.favorito)}>Favorito ‚≠ê</button>\n-              <button onClick={() => deletarSonho(sonhoAtual.id!)}>Excluir üóëÔ∏è</button>\n-            </div>\n-          </div>\n-        )}\n-      </main>\n-    </>\n-  )\n+      partialListenerRef.current = await SpeechRecognition.addListener(\n+        'partialResults',\n+        (data: { matches: string[] }) => {\n+          if (data.matches?.length) {\n+            onTexto(data.matches[0]) // ‚úÖ substitui (n√£o acumula)\n+          }\n+        }\n+      )\n+    } else {\n+      try {\n+        const permissionStatus = await navigator.permissions?.query({\n+          name: 'microphone' as PermissionName,\n+        })\n+\n+        if (permissionStatus?.state === 'denied') {\n+          setErro('Permiss√£o de microfone negada pelo navegador. Verifique as configura√ß√µes do site.')\n+          return\n+        }\n+\n+        recognitionRef.current?.start()\n+      } catch (e) {\n+        setErro('Erro ao acessar o microfone. Verifique as permiss√µes do navegador.')\n+      }\n+    }\n+\n+    setGravando(true)\n+    gravandoRef.current = true\n+  }\n+\n+  const stop = async () => {\n+    if (platform === 'android' || platform === 'ios') {\n+      await SpeechRecognition.stop()\n+\n+      if (partialListenerRef.current) {\n+        await partialListenerRef.current.remove()\n+        partialListenerRef.current = null\n+      }\n+\n+      await SpeechRecognition.removeAllListeners()\n+    } else {\n+      recognitionRef.current?.stop?.()\n+    }\n+\n+    setGravando(false)\n+    gravandoRef.current = false\n+  }\n+\n+  return {\n+    gravando,\n+    erro,\n+    start,\n+    stop,\n+  }\n }\n-\n"
                },
                {
                    "date": 1747773892018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,144 +1,93 @@\n-import { useEffect, useRef, useState } from 'react'\n-import { Capacitor } from '@capacitor/core'\n-import { SpeechRecognition } from '@capacitor-community/speech-recognition'\n+import { useState } from 'react'\n+import { useSpeechRecognition } from './hooks/useSpeechRecognition'\n+import { salvarSonho, deletarSonho, atualizarFavorito } from './libs/db'\n+import { useSonhos } from './hooks/useSonhos'\n+import { interpretarSonho } from './services/interpretadorService'\n \n-/**\n- * Declara√ß√µes globais necess√°rias para a API Web Speech\n- */\n-declare global {\n-  interface Window {\n-    webkitSpeechRecognition: any\n-    SpeechRecognition: any\n-  }\n+import './App.css'\n \n-  interface SpeechRecognitionEvent extends Event {\n-    readonly results: SpeechRecognitionResultList\n-  }\n-}\n+export default function App() {\n+  const hojeISO = new Date().toISOString().split('T')[0]\n+  const [dataSelecionada, setDataSelecionada] = useState(hojeISO)\n+  const [texto, setTexto] = useState('')\n \n-interface UseSpeechRecognitionOptions {\n-  onTexto: (texto: string) => void\n-}\n+  const { historico, setHistorico } = useSonhos()\n \n-export function useSpeechRecognition({ onTexto }: UseSpeechRecognitionOptions) {\n-  const [gravando, setGravando] = useState(false)\n-  const [erro, setErro] = useState<string | null>(null)\n-  const recognitionRef = useRef<any>(null)\n-  const gravandoRef = useRef(false)\n-  const partialListenerRef = useRef<any>(null)\n-  const platform = Capacitor.getPlatform()\n+  const { gravando, erro, start, stop } = useSpeechRecognition({\n+    onTexto: (textoReconhecido) =>\n+      setTexto((prev) => `${prev} ${textoReconhecido}`.trim()),\n+  })\n \n-  useEffect(() => {\n-    if (platform === 'web') {\n-      const SpeechRecognitionClass = window.SpeechRecognition || window.webkitSpeechRecognition\n-      if (!SpeechRecognitionClass) {\n-        setErro('Reconhecimento de voz n√£o suportado no navegador.')\n-        return\n-      }\n+  const toggleMic = () => (gravando ? stop() : start())\n \n-      const recognition = new SpeechRecognitionClass()\n-      recognition.lang = 'pt-BR'\n-      recognition.continuous = true\n-      recognition.interimResults = true\n+  const enviarSonho = async () => {\n+    const interpretado = await interpretarSonho(texto)\n+    await salvarSonho({ data: dataSelecionada, texto, interpretacao: interpretado, favorito: false })\n+    const sonhos = await (await import('./libs/db')).listarSonhos()\n+    setHistorico(sonhos)\n+  }\n \n-      recognition.onresult = (e: SpeechRecognitionEvent) => {\n-        const textoAtual = Array.from(e.results)\n-          .map((r) => r[0].transcript)\n-          .join(' ')\n-        onTexto(textoAtual) // ‚úÖ substitui o texto em tempo real, sem concatenar duplicado\n-      }\n+  const sonhoAtual = historico.find((s) => s.data === dataSelecionada)\n \n-      recognition.onerror = (e: any) => {\n-        setErro('Erro no reconhecimento de voz: ' + e.error)\n-      }\n+  return (\n+    <>\n+      <main className=\"p-8 max-w-xl mx-auto space-y-4\">\n+        <h1 className=\"text-2xl font-bold\">SonhAI ‚Äì Di√°rio de Sonhos</h1>\n \n-      recognition.onend = () => {\n-        if (gravandoRef.current) {\n-          recognition.start() // mant√©m ativo enquanto gravando\n-        }\n-      }\n+        {erro && <div className=\"text-red-600\">{erro}</div>}\n \n-      recognitionRef.current = recognition\n-    }\n+        <div className=\"flex gap-2 justify-center items-center\">\n+          <button onClick={() =>\n+            setDataSelecionada(prev => new Date(new Date(prev + 'T00:00').setDate(new Date(prev + 'T00:00').getDate() - 1)).toISOString().split('T')[0])\n+          }>‚óÄ</button>\n \n-    return () => {\n-      recognitionRef.current?.stop?.()\n-    }\n-  }, [platform, onTexto])\n+          <input\n+            type=\"date\"\n+            value={dataSelecionada}\n+            onChange={(e) => setDataSelecionada(e.target.value)}\n+          />\n \n-  const start = async () => {\n-    setErro(null)\n+          <button onClick={() =>\n+            setDataSelecionada(prev => new Date(new Date(prev + 'T00:00').setDate(new Date(prev + 'T00:00').getDate() + 1)).toISOString().split('T')[0])\n+          }>‚ñ∂</button>\n+        </div>\n \n-    if (platform === 'android' || platform === 'ios') {\n-      const { speechRecognition } = await SpeechRecognition.requestPermissions()\n-      if (speechRecognition !== 'granted') {\n-        setErro('Permiss√£o negada para usar o microfone.')\n-        return\n-      }\n+        <textarea\n+          className=\"w-full h-40 p-2 border rounded\"\n+          placeholder=\"Descreva seu sonho...\"\n+          value={texto}\n+          onChange={(e) => setTexto(e.target.value)}\n+        />\n \n-      await SpeechRecognition.start({\n-        language: 'pt-BR',\n-        partialResults: true,\n-        popup: false,\n-      })\n+        <div className=\"flex gap-4\">\n+          <button\n+            onClick={toggleMic}\n+            className={`flex-1 px-4 py-2 text-white rounded ${gravando ? 'bg-red-600' : 'bg-gray-600'}`}\n+          >\n+            {gravando ? 'Gravando‚Ä¶ üéôÔ∏è' : 'Falar'}\n+          </button>\n \n-      // Remove listener anterior\n-      if (partialListenerRef.current) {\n-        await partialListenerRef.current.remove()\n-        partialListenerRef.current = null\n-      }\n+          <button\n+            onClick={enviarSonho}\n+            disabled={!texto.trim()}\n+            className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded\"\n+          >\n+            Interpretar üß†\n+          </button>\n+        </div>\n \n-      partialListenerRef.current = await SpeechRecognition.addListener(\n-        'partialResults',\n-        (data: { matches: string[] }) => {\n-          if (data.matches?.length) {\n-            onTexto(data.matches[0]) // ‚úÖ substitui (n√£o acumula)\n-          }\n-        }\n-      )\n-    } else {\n-      try {\n-        const permissionStatus = await navigator.permissions?.query({\n-          name: 'microphone' as PermissionName,\n-        })\n+        {sonhoAtual && (\n+          <div className=\"mt-4 p-4 border rounded bg-gray-100 space-y-2\">\n+            <p className=\"italic text-sm\">{sonhoAtual.texto}</p>\n+            <p><strong>Interpreta√ß√£o:</strong> {sonhoAtual.interpretacao}</p>\n+            <div className=\"flex gap-2 text-sm\">\n+              <button onClick={() => atualizarFavorito(sonhoAtual.id!, !sonhoAtual.favorito)}>Favorito ‚≠ê</button>\n+              <button onClick={() => deletarSonho(sonhoAtual.id!)}>Excluir üóëÔ∏è</button>\n+            </div>\n+          </div>\n+        )}\n+      </main>\n+    </>\n+  )\n+}\n \n-        if (permissionStatus?.state === 'denied') {\n-          setErro('Permiss√£o de microfone negada pelo navegador. Verifique as configura√ß√µes do site.')\n-          return\n-        }\n-\n-        recognitionRef.current?.start()\n-      } catch (e) {\n-        setErro('Erro ao acessar o microfone. Verifique as permiss√µes do navegador.')\n-      }\n-    }\n-\n-    setGravando(true)\n-    gravandoRef.current = true\n-  }\n-\n-  const stop = async () => {\n-    if (platform === 'android' || platform === 'ios') {\n-      await SpeechRecognition.stop()\n-\n-      if (partialListenerRef.current) {\n-        await partialListenerRef.current.remove()\n-        partialListenerRef.current = null\n-      }\n-\n-      await SpeechRecognition.removeAllListeners()\n-    } else {\n-      recognitionRef.current?.stop?.()\n-    }\n-\n-    setGravando(false)\n-    gravandoRef.current = false\n-  }\n-\n-  return {\n-    gravando,\n-    erro,\n-    start,\n-    stop,\n-  }\n-}\n"
                },
                {
                    "date": 1747774128653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   const { historico, setHistorico } = useSonhos()\n \n   const { gravando, erro, start, stop } = useSpeechRecognition({\n     onTexto: (textoReconhecido) =>\n-      setTexto((prev) => `${prev} ${textoReconhecido}`.trim()),\n+      setTexto(textoReconhecido.trim()),\n   })\n \n   const toggleMic = () => (gravando ? stop() : start())\n \n"
                },
                {
                    "date": 1747774231831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   const { historico, setHistorico } = useSonhos()\n \n   const { gravando, erro, start, stop } = useSpeechRecognition({\n     onTexto: (textoReconhecido) =>\n-      setTexto(textoReconhecido.trim()),\n+      setTexto((prev) => `${prev} ${textoReconhecido}`.trim()),\n   })\n \n   const toggleMic = () => (gravando ? stop() : start())\n \n@@ -77,9 +77,9 @@\n         </div>\n \n         {sonhoAtual && (\n           <div className=\"mt-4 p-4 border rounded bg-gray-100 space-y-2\">\n-            <p className=\"italic text-sm\">{sonhoAtual.texto}</p>\n+            <textarea  className=\"italic text-sm\">{sonhoAtual.texto}</textarea >\n             <p><strong>Interpreta√ß√£o:</strong> {sonhoAtual.interpretacao}</p>\n             <div className=\"flex gap-2 text-sm\">\n               <button onClick={() => atualizarFavorito(sonhoAtual.id!, !sonhoAtual.favorito)}>Favorito ‚≠ê</button>\n               <button onClick={() => deletarSonho(sonhoAtual.id!)}>Excluir üóëÔ∏è</button>\n"
                },
                {
                    "date": 1747774260716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n         </div>\n \n         {sonhoAtual && (\n           <div className=\"mt-4 p-4 border rounded bg-gray-100 space-y-2\">\n-            <textarea  className=\"italic text-sm\">{sonhoAtual.texto}</textarea >\n+            <p className=\"italic text-sm\">{sonhoAtual.texto}</p>\n             <p><strong>Interpreta√ß√£o:</strong> {sonhoAtual.interpretacao}</p>\n             <div className=\"flex gap-2 text-sm\">\n               <button onClick={() => atualizarFavorito(sonhoAtual.id!, !sonhoAtual.favorito)}>Favorito ‚≠ê</button>\n               <button onClick={() => deletarSonho(sonhoAtual.id!)}>Excluir üóëÔ∏è</button>\n"
                },
                {
                    "date": 1747775667650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   const { historico, setHistorico } = useSonhos()\n \n   const { gravando, erro, start, stop } = useSpeechRecognition({\n     onTexto: (textoReconhecido) =>\n-      setTexto((prev) => `${prev} ${textoReconhecido}`.trim()),\n+      setTexto(textoReconhecido.trim()),\n   })\n \n   const toggleMic = () => (gravando ? stop() : start())\n \n"
                },
                {
                    "date": 1747776435613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   const { historico, setHistorico } = useSonhos()\n \n   const { gravando, erro, start, stop } = useSpeechRecognition({\n     onTexto: (textoReconhecido) =>\n-      setTexto(textoReconhecido.trim()),\n+      setTexto((prev) => `${prev} ${textoReconhecido}`.trim()),\n   })\n \n   const toggleMic = () => (gravando ? stop() : start())\n \n"
                },
                {
                    "date": 1747777011731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   const { historico, setHistorico } = useSonhos()\n \n   const { gravando, erro, start, stop } = useSpeechRecognition({\n     onTexto: (textoReconhecido) =>\n-      setTexto((prev) => `${prev} ${textoReconhecido}`.trim()),\n+      setTexto(textoReconhecido.trim()),\n   })\n \n   const toggleMic = () => (gravando ? stop() : start())\n \n"
                },
                {
                    "date": 1747777359667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n \n   const { historico, setHistorico } = useSonhos()\n \n   const { gravando, erro, start, stop } = useSpeechRecognition({\n-    onTexto: (textoReconhecido) =>\n+    onTexto: (textoReconhecido: string) =>\n       setTexto(textoReconhecido.trim()),\n   })\n \n   const toggleMic = () => (gravando ? stop() : start())\n"
                },
                {
                    "date": 1747777575247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,13 +12,10 @@\n   const [texto, setTexto] = useState('')\n \n   const { historico, setHistorico } = useSonhos()\n \n-  const { gravando, erro, start, stop } = useSpeechRecognition({\n-    onTexto: (textoReconhecido: string) =>\n-      setTexto(textoReconhecido.trim()),\n-  })\n-\n+  const { texto, gravando, erro, start, stop, setTexto } = useSpeechRecognition()\n+  \n   const toggleMic = () => (gravando ? stop() : start())\n \n   const enviarSonho = async () => {\n     const interpretado = await interpretarSonho(texto)\n"
                },
                {
                    "date": 1747777581945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,14 +8,13 @@\n \n export default function App() {\n   const hojeISO = new Date().toISOString().split('T')[0]\n   const [dataSelecionada, setDataSelecionada] = useState(hojeISO)\n-  const [texto, setTexto] = useState('')\n \n   const { historico, setHistorico } = useSonhos()\n \n   const { texto, gravando, erro, start, stop, setTexto } = useSpeechRecognition()\n-  \n+\n   const toggleMic = () => (gravando ? stop() : start())\n \n   const enviarSonho = async () => {\n     const interpretado = await interpretarSonho(texto)\n"
                },
                {
                    "date": 1747777594675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   const { historico, setHistorico } = useSonhos()\n \n   const { texto, gravando, erro, start, stop, setTexto } = useSpeechRecognition()\n \n-  const toggleMic = () => (gravando ? stop() : start())\n+const toggleMic = () => gravando ? stop() : start()\n \n   const enviarSonho = async () => {\n     const interpretado = await interpretarSonho(texto)\n     await salvarSonho({ data: dataSelecionada, texto, interpretacao: interpretado, favorito: false })\n"
                },
                {
                    "date": 1747777664380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   const { historico, setHistorico } = useSonhos()\n \n   const { texto, gravando, erro, start, stop, setTexto } = useSpeechRecognition()\n \n-const toggleMic = () => gravando ? stop() : start()\n+  const toggleMic = () => gravando ? stop() : start()\n \n   const enviarSonho = async () => {\n     const interpretado = await interpretarSonho(texto)\n     await salvarSonho({ data: dataSelecionada, texto, interpretacao: interpretado, favorito: false })\n"
                },
                {
                    "date": 1747785573851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,10 @@\n \n   return (\n     <>\n       <main className=\"p-8 max-w-xl mx-auto space-y-4\">\n-        <h1 className=\"text-2xl font-bold\">SonhAI ‚Äì Di√°rio de Sonhos</h1>\n+        <h1 className=\"text-2xl font-bold\">SonhAI</h1>\n+        <h2>Di√°rio de Sonhos</h2>\n \n         {erro && <div className=\"text-red-600\">{erro}</div>}\n \n         <div className=\"flex gap-2 justify-center items-center\">\n"
                },
                {
                    "date": 1747786369633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,90 +1,48 @@\n+// App.tsx - Refatorado com princ√≠pios SOLID\n+\n import { useState } from 'react'\n import { useSpeechRecognition } from './hooks/useSpeechRecognition'\n-import { salvarSonho, deletarSonho, atualizarFavorito } from './libs/db'\n import { useSonhos } from './hooks/useSonhos'\n-import { interpretarSonho } from './services/interpretadorService'\n+import { SonhoForm } from './components/SonhoForm'\n+import { SonhoHistorico } from './components/SonhoHistorico'\n+import { useSonhoService } from './services/useSonhoService'\n \n import './App.css'\n \n export default function App() {\n   const hojeISO = new Date().toISOString().split('T')[0]\n   const [dataSelecionada, setDataSelecionada] = useState(hojeISO)\n \n   const { historico, setHistorico } = useSonhos()\n+  const { texto, setTexto, gravando, erro, start, stop } = useSpeechRecognition()\n+  const { salvarESincronizarSonho } = useSonhoService(setHistorico)\n \n-  const { texto, gravando, erro, start, stop, setTexto } = useSpeechRecognition()\n+  const toggleMic = () => (gravando ? stop() : start())\n \n-  const toggleMic = () => gravando ? stop() : start()\n-\n   const enviarSonho = async () => {\n-    const interpretado = await interpretarSonho(texto)\n-    await salvarSonho({ data: dataSelecionada, texto, interpretacao: interpretado, favorito: false })\n-    const sonhos = await (await import('./libs/db')).listarSonhos()\n-    setHistorico(sonhos)\n+    await salvarESincronizarSonho(dataSelecionada, texto)\n   }\n \n   const sonhoAtual = historico.find((s) => s.data === dataSelecionada)\n \n   return (\n-    <>\n-      <main className=\"p-8 max-w-xl mx-auto space-y-4\">\n-        <h1 className=\"text-2xl font-bold\">SonhAI</h1>\n-        <h2>Di√°rio de Sonhos</h2>\n+    <main className=\"p-8 max-w-xl mx-auto space-y-4\">\n+      <h1 className=\"text-2xl font-bold\">SonhAI</h1>\n+      <h2 className=\"text-lg text-gray-600\">Di√°rio de Sonhos</h2>\n \n-        {erro && <div className=\"text-red-600\">{erro}</div>}\n+      {erro && <div className=\"text-red-600\">{erro}</div>}\n \n-        <div className=\"flex gap-2 justify-center items-center\">\n-          <button onClick={() =>\n-            setDataSelecionada(prev => new Date(new Date(prev + 'T00:00').setDate(new Date(prev + 'T00:00').getDate() - 1)).toISOString().split('T')[0])\n-          }>‚óÄ</button>\n+      <SonhoForm\n+        data={dataSelecionada}\n+        setData={setDataSelecionada}\n+        texto={texto}\n+        setTexto={setTexto}\n+        gravando={gravando}\n+        toggleMic={toggleMic}\n+        onSubmit={enviarSonho}\n+      />\n \n-          <input\n-            type=\"date\"\n-            value={dataSelecionada}\n-            onChange={(e) => setDataSelecionada(e.target.value)}\n-          />\n-\n-          <button onClick={() =>\n-            setDataSelecionada(prev => new Date(new Date(prev + 'T00:00').setDate(new Date(prev + 'T00:00').getDate() + 1)).toISOString().split('T')[0])\n-          }>‚ñ∂</button>\n-        </div>\n-\n-        <textarea\n-          className=\"w-full h-40 p-2 border rounded\"\n-          placeholder=\"Descreva seu sonho...\"\n-          value={texto}\n-          onChange={(e) => setTexto(e.target.value)}\n-        />\n-\n-        <div className=\"flex gap-4\">\n-          <button\n-            onClick={toggleMic}\n-            className={`flex-1 px-4 py-2 text-white rounded ${gravando ? 'bg-red-600' : 'bg-gray-600'}`}\n-          >\n-            {gravando ? 'Gravando‚Ä¶ üéôÔ∏è' : 'Falar'}\n-          </button>\n-\n-          <button\n-            onClick={enviarSonho}\n-            disabled={!texto.trim()}\n-            className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded\"\n-          >\n-            Interpretar üß†\n-          </button>\n-        </div>\n-\n-        {sonhoAtual && (\n-          <div className=\"mt-4 p-4 border rounded bg-gray-100 space-y-2\">\n-            <p className=\"italic text-sm\">{sonhoAtual.texto}</p>\n-            <p><strong>Interpreta√ß√£o:</strong> {sonhoAtual.interpretacao}</p>\n-            <div className=\"flex gap-2 text-sm\">\n-              <button onClick={() => atualizarFavorito(sonhoAtual.id!, !sonhoAtual.favorito)}>Favorito ‚≠ê</button>\n-              <button onClick={() => deletarSonho(sonhoAtual.id!)}>Excluir üóëÔ∏è</button>\n-            </div>\n-          </div>\n-        )}\n-      </main>\n-    </>\n+      {sonhoAtual && <SonhoHistorico sonho={sonhoAtual} onAtualizar={setHistorico} />}\n+    </main>\n   )\n }\n-\n"
                },
                {
                    "date": 1747787140375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-// App.tsx - Refatorado com princ√≠pios SOLID\n-\n import { useState } from 'react'\n import { useSpeechRecognition } from './hooks/useSpeechRecognition'\n import { useSonhos } from './hooks/useSonhos'\n import { SonhoForm } from './components/SonhoForm'\n"
                },
                {
                    "date": 1747787381576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+\n import { useState } from 'react'\n import { useSpeechRecognition } from './hooks/useSpeechRecognition'\n import { useSonhos } from './hooks/useSonhos'\n import { SonhoForm } from './components/SonhoForm'\n@@ -23,13 +24,13 @@\n \n   const sonhoAtual = historico.find((s) => s.data === dataSelecionada)\n \n   return (\n-    <main className=\"p-8 max-w-xl mx-auto space-y-4\">\n+    <main className=\"p-8 max-w-xl mx-auto space-y-4 bg-white text-black dark:bg-black dark:text-white min-h-screen\">\n       <h1 className=\"text-2xl font-bold\">SonhAI</h1>\n-      <h2 className=\"text-lg text-gray-600\">Di√°rio de Sonhos</h2>\n+      <h2 className=\"text-lg text-gray-600 dark:text-gray-300\">Di√°rio de Sonhos</h2>\n \n-      {erro && <div className=\"text-red-600\">{erro}</div>}\n+      {erro && <div className=\"text-red-600 dark:text-red-400\">{erro}</div>}\n \n       <SonhoForm\n         data={dataSelecionada}\n         setData={setDataSelecionada}\n"
                },
                {
                    "date": 1747788053625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-\n import { useState } from 'react'\n import { useSpeechRecognition } from './hooks/useSpeechRecognition'\n import { useSonhos } from './hooks/useSonhos'\n import { SonhoForm } from './components/SonhoForm'\n"
                },
                {
                    "date": 1747788878953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n   const sonhoAtual = historico.find((s) => s.data === dataSelecionada)\n \n   return (\n-    <main className=\"p-8 max-w-xl mx-auto space-y-4 bg-white text-black dark:bg-black dark:text-white min-h-screen\">\n+    <main className=\"p-8 max-w-xl mx-auto space-y-4 bg-black text-black dark:bg-black dark:text-white min-h-screen\">\n       <h1 className=\"text-2xl font-bold\">SonhAI</h1>\n       <h2 className=\"text-lg text-gray-600 dark:text-gray-300\">Di√°rio de Sonhos</h2>\n \n       {erro && <div className=\"text-red-600 dark:text-red-400\">{erro}</div>}\n"
                },
                {
                    "date": 1747788903475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n   const sonhoAtual = historico.find((s) => s.data === dataSelecionada)\n \n   return (\n-    <main className=\"p-8 max-w-xl mx-auto space-y-4 bg-black text-black dark:bg-black dark:text-white min-h-screen\">\n+    <main className=\"p-8 max-w-xl mx-auto space-y-4 bg-white text-black dark:bg-black dark:text-white min-h-screen\">\n       <h1 className=\"text-2xl font-bold\">SonhAI</h1>\n       <h2 className=\"text-lg text-gray-600 dark:text-gray-300\">Di√°rio de Sonhos</h2>\n \n       {erro && <div className=\"text-red-600 dark:text-red-400\">{erro}</div>}\n"
                }
            ],
            "date": 1747762321846,
            "name": "Commit-0",
            "content": "import { useEffect, useRef, useState } from 'react'\nimport { Capacitor } from '@capacitor/core'\nimport { SpeechRecognition } from '@capacitor-community/speech-recognition'\n\ndeclare global {\n  interface Window {\n    webkitSpeechRecognition: any\n    SpeechRecognition: any\n  }\n  interface SpeechRecognitionEvent extends Event {\n    readonly results: SpeechRecognitionResultList\n  }\n}\n\nexport function useVoz(onTexto: (texto: string) => void) {\n  const [gravando, setGravando] = useState(false)\n  const isMobile = Capacitor.getPlatform() !== 'web'\n  const recognitionRef = useRef<any>(null)\n\n  useEffect(() => {\n    if (!isMobile) {\n      const SpeechRecognitionClass = window.SpeechRecognition || window.webkitSpeechRecognition\n      if (!SpeechRecognitionClass) return\n\n      const recognition = new SpeechRecognitionClass()\n      recognition.lang = 'pt-BR'\n      recognition.continuous = true\n      recognition.interimResults = true\n\n      recognition.onresult = (e: SpeechRecognitionEvent) => {\n        const texto = Array.from(e.results)\n          .map((r) => r[0].transcript)\n          .join(' ')\n        onTexto(texto)\n      }\n\n      recognition.onend = () => {\n        if (recognitionRef.current && gravando) {\n          recognitionRef.current.start()\n        }\n      }\n\n      recognitionRef.current = recognition\n    }\n\n    return () => {\n      recognitionRef.current?.stop()\n    }\n  }, [isMobile])\n\n  const iniciar = async () => {\n    if (isMobile) {\n      const { speechRecognition } = await SpeechRecognition.requestPermissions()\n      if (speechRecognition !== 'granted') return\n\n      await SpeechRecognition.start({\n        language: 'pt-BR',\n        partialResults: true,\n        popup: false,\n      })\n\n      SpeechRecognition.addListener('partialResults', (data: { matches: string[] }) => {\n        if (data.matches?.length) onTexto(data.matches[0])\n      })\n    } else {\n      recognitionRef.current?.start()\n    }\n\n    setGravando(true)\n  }\n\n  const parar = async () => {\n    if (isMobile) {\n      await SpeechRecognition.stop()\n      await SpeechRecognition.removeAllListeners()\n    } else {\n      recognitionRef.current?.stop()\n    }\n\n    setGravando(false)\n  }\n\n  return {\n    gravando,\n    iniciar,\n    parar,\n  }\n}\n"
        }
    ]
}